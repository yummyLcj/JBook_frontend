<template>
  <view class="container">
    <repeat for="{{books}}" item="item">
      <view class="list">
        <view class="item-title">全部{{item.type}}</view>
          <repeat for="{{item.list}}" item="col">
            <view class="list-item {{col.active}}" @longpress="remove" @tap="back({{col.aid}})">
              <view class="item-col">
                <view class="list-each tal">
                  <view class="col-inline"><text class="iconfont icon-{{col.icon}} {{col.icon}} item-icon"></text></view>
                  <view class="col-inline">
                    <view class="each-title fs42">{{col.name}}</view>
                    <view class="col-inline">{{col.title}}账本</view>
                    <view class="col-inline mr10">{{col.member}}人</view>
                  </view>
                </view>
                <view class="list-each tar">共有{{col.total}}笔记账</view>
              </view>
            </view>
          </repeat>
        </view>
      </view>
    </repeat>
    <button class="iconfont add-btn icon-add" @tap="addBook"></button>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import ajax from 'com/ajax'

  export default class List extends wepy.page {
    config = {
      navigationBarTitleText: '账本列表'
    }

    data = {
      books: []
    }

    methods = {
      addBook () {
        wepy.navigateTo({
          url: 'add'
        })
      },
      remove (item) {
        wepy.showModal({
          title: '提示',
          content: `确认删除账本${item.name}吗？`,
          success: function(res) {
            if (res.confirm) {
              console.log(item)
            } else if (res.cancel) {
              // todo
            }
          }
        })
      },
      back (aid) {
        wepy.redirectTo({
          url: `/pages/normal?aid=${aid}`
        })
      }
    }

    gettingAccounts() {
      return ajax({
        data: {
          method: '/accounts/{uid}'
        }
      }).then((res) => {
        let accounts = [
          {
            type: '账本',
            list: []
          }
        ]
        const memberCount = res.data.memberCount
        const recordCount = res.data.recordCount
        res.data.data.forEach((account) => {
          let item = {
            icon: 'book',
            name: account.account.accountName,
            aid: account.aid,
            access: account.access,
            title: account.type === 1 ? '日常' : 'AA',
            member: memberCount[account.aid] || 0,
            total: recordCount[account.aid] || 0
          }
          accounts[0].list.push(item)
        })
        this.books = accounts
        this.$apply()
      })
    }

    onLoad(opt) {
      this.gettingAccounts()
    }
  }
</script>

<style lang="less">
  .list {
    font-size: 24rpx;
    color: #999;
    .item-title {
      padding: 12rpx 40rpx;
      background-color: #efefef;
    }
    .list-item {
      padding-left: 30rpx;
      box-sizing: border-box;
      &.active {
        border-left: 4px solid #48D1CC;
      }
    }
    .item-col {
      padding: 20rpx 40rpx 20rpx 10rpx;
      border-bottom: 1px solid #efefef;
      display: flex;
      align-items: center;
      .list-each {
        flex: 2;
      }
      .tal {
        flex: 3;
      }
      .col-inline {
        display: inline-block;
        vertical-align: middle;
      }
      .each-title {
        margin-bottom: 20rpx;
        font-size: 26rpx;
        width: 280rpx;
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
        color: #333;
      }
      .item-icon {
        font-size: 90rpx;
        margin-right: 16rpx;
      }
      .book {
        color: #48D1CC;
      }
      .circle {
        color: #81949e;
      }
    }
  }
</style>
