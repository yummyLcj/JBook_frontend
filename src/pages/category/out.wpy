<template>
  <form class="container" @submit="save">
    <view class="header">
      <view class="add-mount">
        <view class="add-each tal">
          <text class="iconfont icon-{{type.icon}} {{type.icon}} icon-border"></text>
        </view>
        <view class="add-each tar">
          <input type="text" name="name" placeholder="请输入分类名称" value="{{type.name}}" />
        </view>
      </view>
    </view>

    <view class="tag-tip">请选择图标</view>

    <view class="tags">
      <repeat for="{{tags}}" item="item">
        <view class="tag-item" @tap="changeIcon({{item}})">
          <view><text class="iconfont icon-{{item.icon}} {{item.icon}} icon-border"></text></view>
          <view class="tag-name">{{item.name}}</view>
        </view>
      </repeat>
    </view>

    <button class="save" formType="submit" loading="{{btnLoading}}">保存</button>
  </form>
</template>

<script>
  import wepy from 'wepy'
  import Toast from 'wepy-com-toast'

  export default class Out extends wepy.page {
    config = {
      navigationBarTitleText: '添加支出账单分类'
    }

    components = {
      toast: Toast
    }

    data = {
      userInfo: {
        nickName: '加载中...'
      },
      type: {
        icon: 'fee',
        name: ''
      },
      tags: [
        {
          icon: 'eat',
          name: '餐饮'
        },
        {
          icon: 'present',
          name: '礼物'
        },
        {
          icon: 'water',
          name: '水费'
        },
        {
          icon: 'house',
          name: '房租'
        },
        {
          icon: 'screen',
          name: '旅游'
        },
        {
          icon: 'shop',
          name: '购物'
        },
        {
          icon: 'edit',
          name: '自定义'
        }
      ]
    }

    computed = {
      now () {
        return +new Date()
      }
    }

    methods = {
      changeIcon (item) {
        this.type.icon = item.icon
      },
      bindInput (e) {
        this.type.name = e.detail.value
      },
      save (e) {
        console.log(e.detail.value, this.type)
      }
    }

    // 存放响应组件之间通过$broadcast、$emit、$invoke所传递的事件的函数
    events = {}

    onLoad(opt) {
      // todo
    }
  }
</script>

<style lang="less">
  .header {
    box-sizing: border-box;
    .add-mount {
      font-size: 30rpx;
      padding: 20rpx 40rpx;
      border-bottom: 1px solid #efefef;
      display: flex;
      .add-each {
        flex: 1;
      }
      &:first-child {
        border-top: 1px solid #efefef;
      }
    }
  }

  .tag-tip {
    padding-left: 40rpx;
    font-size: 26rpx;
    height: 76rpx;
    line-height: 76rpx;
    background-color: #efefef;
  }

  .tags {
    padding: 30rpx;
    padding-bottom: 10rpx;
    margin-bottom: 80rpx;
    font-size: 24rpx;
    .tag-item {
      display: inline-block;
      vertical-align: middle;
      width: 20%;
      text-align: center;
      margin-bottom: 30rpx;
    }
    &:last-child {
      .icon-border {
        color: #ddd;
        border: 1 px dashed #ddd;
      }
    }
    .tag-name {
      margin-top: 20rpx;
    }
  }

  .save {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    height: 80rpx;
    line-height: 80rpx;
    border: none;
    border-radius: 0;
    background-color: #48D1CC;
    color: #fff;
    font-size: 32rpx;
  }
</style>
